# python基础知识  1

python运行形式：

* 交互式

* 文件式





## 程序语法元素分析

* 程序的格式框架 

   * 缩进：严格明确，所属关系，长度一直

   * 注释：解释说明
* 命名与保留字

   * 变量：命名规则：大小写字母，数字，下划线，汉字等字符及组合

   * 保留字：编程内部定义并保留使用的标识符，大小写敏感
* 数据类型

   * 字符串类型

   * 列表类型

      * in使用

      * 单引号分开

      * 逗号分开

   * 数类型

      * 整数

      * 浮点数

      * 
* 语句与函数

   * 赋值语句

   * 分支语句

      * if    elif else 

      * 冒号引出内容
* 输入与输出

   * input（）函数，括号内是提示信息

   * print（）函数，

      * 格式化方法





## 程序结构

### 单分支结构

### 二分支结构

* 普通二分支
* <表达式1\>if<条件\>else<表达式2\>   #输出是表达式

### 多分支结构

* 注意先后关系，包含关系

* 条件组合

### 异常处理

try:

except:

\[else:\]

\[finally:\]



### 遍历循环

* for <循环变量\>in <遍历结构\> 
*       语句块

   * for  i  in  range\(N\)  #计数循环，range的三种形式

   * for c in  s     #字符串循环，s是字符串，c是临时变量

   * for item in ls  #列表循环，元组。ls 是一个列表

   * for line in fi  #文件遍历循环。fi是一个文件标识符，遍历每一行产生循环
* while <\>条件:

*          语句块



> break：跳出并且接触当前整个循环，执行循环后的语句

> continue：结束当前循环，执行后续次数循环











# 数字类型及操作

## 整数类型

> pow（a,b）函数

### 进制转换



## 浮点类型

运算存在不确定尾数。

0\.1\+0.2=0.3000000000004



原因：采用53位二进制表述浮点数。

> round（x，d）函数：对x四舍五入，d是小数截取位数。

浮点数比较大小可能需要round函数辅助比较。





## 复数类型

数后面贴一个j代表复数。

z\.real获取实部

z\.image获取虚部

> cmath库专门处理复数



## 数值运算操作符

\+            \-           \*           /（是浮点数结果）      //整数除（10//3=2）



%          \*\*（x\*\*y：x的y次幂）



\+=     \-=      \*=    /=      //=     %=    \*\*= 



## 数字类型的关系

混合运算，生成结果为”最宽“类型

* 整数   \-\> 浮点数 \-\>  复数

> 混合运算注意不确定尾数







## 数值运算函数

> abs\(x\)   绝对值

> divmod\(x,y\)  商余\*（x//y，x%y）

> pow\(x,y\[,z\]\) 幂余，\(x\*\*y\)%z,参数z可以省略  余数为了保证超大数使得运算，表示无法正常进行

> round\(x\[,d\]\) 四舍五入

> max\(x1,x2...xn\) min\(..\)  返回最大，最小值

> int\(x\) 将x转化成整数，舍弃小数部分

> float\(x\) 将x变成浮点数，增加小数部分

> complex\(x\) 将x变成复数，增加虚数部分













# 集合类型及操作

## 集合类型的定义

* 集合类型与数学中的集合概念一致
* 集合元素之间无序，每个元素唯一且不重复
* 集合元素不可更改，不能是可变数据类型

> 如果可变类型，如果改变成重复数据岂不是很尴尬



整数，浮点数，复数



## 集合创建

使用\{\}或set（）函数创建

## 集合操作符

> S|T  返回一个新的集合，包括集合S和T中的所有元素

> S\-T  返回一个新的集合 ，包括集合S但是不在T中的元素

> S&T 返回一个新的集合，包括同时在集合S和T中的元素

> S^T  返回一个新的集合，包括集合S和T非相同元素

> S<=T 或  S<T   返回Ture/False，判断S和T的子集关系

> S\>=T 或 S\>T   返回Ture/False，判断S和T的包含关系

 增强操作符，修改原有的集合

> S|=T  更新集合S，包括在集合S和T中的所有元素

> S\-=T

> S&=T

> S^=T



## 集合处理方法

> S\.add\(x\)   如果x不在集合S中，将x加入s

> S\.discard\(x\)  移除S中的元素x，如果x不在集合S中，不报错

> S\.remove\(x\)    移除S中的元素x，如果x不在集合中，则产生keyerror异常

> S\.clear\(\)       移除S中所有元素

> S\.pop\(\)   随机返回S中的一个元素，更新S，若S为空产生keyerror异常

> S\.copy\(\)  返回一个集合副本

> len\(S\) 

> x in S  判断S中的元素x，在返回Ture，不在返回False

> x not in S

> set\(x\) 将其他类型变量x转变成集合类型












# 字符串类型 

## 索引操作

Temp\[num\]         #第num个变量值



## 切片操作

Temp\[num:num2\]  #第num到第num2的所有值

Temp\[num:num2:x\] #x表示步长

Temp\[::\-1\] #使得字符串逆序



## 字符串类型表示

### 字符串的序号

* 正向递增序号
* 反向递减序号

### 特殊字符的表示

转义符的使用





## 字符串操作符

x\+y：字符串相加

x\*n或者n\*x：字符x复制n次

x in s： 判断x是否在s串中





## 字符串操作函数

> 评估函数eval（）   去掉参数最外侧引号\(“”   ‘’\)并执行余下语句的函数

> len\(x\)    返回字符串x的长度

> str\(x\)    与eval（）相反，将任意类型转化成字符串类型

> hex\(x\)    整数x的十六进制小写形式字符串

> oct\(x\)     整数x的八进制小写形式字符串

> chr\(x\)      编码对应字符打印出来

> ord\(x\)      获得字符的编码



## 字符串操作方法

> str\.lower\(\)/str.upper\(\)      全部字符转化大小写

> str\.split\(sep=None\)        返回一个列表，可以使用多个分隔符分割字符串。   例如：text.split\(".|\!|?"\)

> 使用多分割符分割注意几点：1.字符串直接操作不能顺利切割（不清楚为什么），需要调用re库，如：a = re.split\(" |:|\-",s\)   2.注意转义字符

> str\.count\(sub\)    返回子串sub在str中出现的次数

> str\.replace\(old,new\)  替换

> str\.center\(width\[,fillchar\]\)   字符串str根据width居中,fillchar可选。 

> str\.strip\(chars\)  从str中去掉在其左侧和右侧chars中列出的字符

> str\.join\(iter\)  在iter变量除最后元素外每个元素后加一个str #主要用于字符串分隔等，





## 字符串类型的格式化

槽，参数：槽与参数依次对应 （默认），或者按序号对应

#”\{1\}：计算机的\{0\}使用情况为：\{2\}“.format\("2020.2.2","C","使用"\)

\-\> C： 计算机的2020.2.2使用情况为使用



`：  引导符号`

`<填充>  用于填充的单个字符`

`<对齐>  <左对齐，> 右对齐，^居中对齐`

`<宽度>   槽设定的输出宽度`

`<   <, >  <.精度 >  <类型>>`

逗号增加千分位符号

精度确定浮点小数精度或者字符长度

类型L确定输出类型：

* 整数:b,c,d,o,x,X
* 浮点:e,E,f,%












# 序列类型

## 序列类型的定义

有序号，和字符串操作类似



衍生的类型：

字符串类型

元组类型

列表类型





## 序列类型及操作


![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205210735949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)




## 序列类型通用函数和方法



![\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-WBzHm36B-1580907707712)(序列类型\Image1.png)\]](https://img-blog.csdnimg.cn/20200205210812282.png)


## 元组类型及操作

元组是序列类型的一种扩展

* 元组一旦创建就不饿能修改
* 使用（）或者tuple（）创建，元素间用，隔开。
* 可以使用或者不使用小括号（函数返回，定义）

继承了序列的所有操作。

元组类型没有其他的特殊的操作。



## 列表类型及操作

列表是序列的一个扩展，应用广泛。

使用\[\]或list（）创建，元素间，分割

列表中各元素类型可以不同，无长度限制


![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205210850784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205210903586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)




> ls\.sort\(cmp=None,key=None,reverse=False\)                   cmp \-\- 可选参数, 如果指定了该参数会使用该参数的方法进行排序                                                                               key \-\-  主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。                reverse \-\- 排序规则，reverse = True 降序， reverse = False 升序（默认）。










# 字典类型

字典类型是”映射“的体现

* 键值对：键是数据索引的扩展
* 字典是键值对的集合，价值对之间无序
* 采用\{\}和dict（），键值对用:表示

生成空的字典可以直接n=\{\}，而列表不可以，列表生成空的只能用set（）。因为定义如此。



## 列表类型操作函数和方法

> d\.get\(k,<default\>\)      键k存在，则返回相应值，不在则返回,<default\>值

> d\.pop\(k,<default\>\)      键k存在，则取出相应值，不在则返回,<default\>值

> d\.popitem\(\)  随机从字典d中取出一个键值对，以元组形式返回

> d\.clear\(\)

> len\(d\)

> d\.items\(\)     返回可遍历的\(键, 值\) 元组数组，如果要对数组进行操作需要转化成列表才可以（list）






# 函数和代码的复用

## 函数的定义和使用

> 可选参数，必选参数。如果传入的数量不够后面的默认为可选参数，所以必要的参数位置放在前面。

![在这里插入图片描述](https://img-blog.csdnimg.cn/2020020521155423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)
> 可变参数：\*b.  \(def fact \(n,\*m\)   \)

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211539983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)


### 返回值

* 可以不返回
* 返回一个
* 返回多个  （元组接收）



### 全局变量与局部变量

#### 局部变量与全局变量不会相同，如果需要表示全局变量需要加上global标识符。

#### 组合类型的变量（指针类型来实现），如果在函数内并没有创建该名称的组合类型的变量，那么对该组合类型变量的调用就是对全局变量进行调用。



### lambda函数：

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211523661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)








## 代码复用与函数递归

### 模块化设计

* 紧耦合
* 松耦合



### 递归

* 链条     计算过程存在递归链条
* 基例     存在一个或多个不需要再次递归的基例



## 实例：

* 汉诺塔操作递归
* 斐波那契
* 科赫雪花绘制




# 文件和数据的处理

## 概念

文件是数据的抽象和集合

### 文本文件

* 由单一的特定编码组成的文件，如UTF\-8
* 由于存在编码，可以被看成是存储着的长字符串

* 如py，txt

### 二进制文件

* 直接由比特0和1组成，没有统一字符编码
* 一般存在二进制0和1的组织结构，即文件格式
* 适用于例如：png文件，avi文件等





## 文件的打开模式

> 'r'              只读模式，默认值。如果不存在则返回FileNotFoundError

> 'w'          覆盖写模式，文件不存在则创建，存在则完全覆盖

> 'x'           创建写模式，文件不存在则创建，存在则返回FileExistsError

> 'a'          追加写模式，文件不存在则创建，存在则在文件最后追加内容

> 'b'          二进制文件模式

> 't'           文本文件模式，默认值

> '\+'         与r/w/x/a一同使用，在原功能基础上增加同时读写功能





## 操作函数和方法

> x=open\(<文件名\>,<打开模式\>\)  #文件打开

>   文件名：绝对路径      注意“ \\\\ ”或者    “/”        相对路径 

> <变量名\>.close\(\)         程序正常退出自动关闭



> <f\>.read\(size=\-1\)      读入全部内容，如果给出参数，读出前size长度内容

> <f\>.readline\(size=\-1\)     读入一行内容，如果给出参数，读入该行前size长度

> <f\>.readlines\(hint=\-1\)  读入文件所有行，以每行为元素形成列表，如果给出参数，读入前hint行

> <f\>.write\(s\)      向文件中写入一个字符串或字节流

> <f\>.writelines\(lines\)      将一个元素全为字符串的列表写入文件（并非按名字分行写入，列表内容拼合后写入）

> <f\>.seek\(offset\)    改变当前文件操作指针的位置。offset含义：  0\-文件开头    1\-当前位置    2\-文件结尾











## 数据的处理

* 一维数据
* 二维数据
* 多维数据
* 高维数据     仅利用最基本的二维关系展示数据间的复杂结构





### 数据的操作周期

存储  表示  操作



![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211204498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)




### 一维数据的表示

* 集合类型可以表达一维无序数据
* for循环可以遍历数据，进而对每个数据进行处理



### 一维数据的存储

* 存储方式一：使用一个或多个空格进行分割，不换行
* 缺点：数据中不能存在空格
* 存储方式二：使用逗号分隔，不换行
* 缺点：数据中不能存在逗号

* 存储方式三：可以使用其他特殊符号或者是符号的组合



### 一维数据的处理

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211235847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)




#### 读入处理
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211255598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211329541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)



#### 写入处理
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211339848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211351665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)




### 二维数据的表示

* 使用二维列表类型表示，每个列表元素都是一个列表
* （还由很多高级的方法）

* 使用两层for循环遍历每个元素
* 外层列表中每个元素可以对应一行，也可以对应一列

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205211410603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzkwNzAz,size_16,color_FFFFFF,t_70)








